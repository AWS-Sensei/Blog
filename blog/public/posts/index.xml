<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - AWS Sensei</title>
        <link>http://localhost:1313/posts/</link>
        <description>All Posts | AWS Sensei</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 06 May 2021 00:00:00 &#43;0200</lastBuildDate><atom:link href="http://localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Fake Methods and Dependencies without Dependency Injection</title>
    <link>http://localhost:1313/posts/2021-05-06-overridable-members/</link>
    <pubDate>Thu, 06 May 2021 00:00:00 &#43;0200</pubDate>
    <author>Marcel</author>
    <guid>http://localhost:1313/posts/2021-05-06-overridable-members/</guid>
    <description><![CDATA[<h2 id="mocking-via-virtual-method">Mocking via virtual method</h2>
<p>Fake Dependencies with an Interface and Dependency Injection is easy and the usual approach. But how can you fake without Dependency Injection or an Interface. I will show you two situations that came up in production code.</p>
<h3 id="factory-method">Factory Method</h3>
<p>The first situation is a small AWS Lambda function with an http call. We want to mock the .Net HttpClient and write a UnitTest for our Request method.</p>]]></description>
</item>
<item>
    <title>Fake static property DateTime.Now() with a DateTime Provider</title>
    <link>http://localhost:1313/posts/2021-05-04-datetime-provider/</link>
    <pubDate>Tue, 04 May 2021 00:00:00 &#43;0200</pubDate>
    <author>Marcel</author>
    <guid>http://localhost:1313/posts/2021-05-04-datetime-provider/</guid>
    <description><![CDATA[<p>Our code is often time-dependent. We use the date or time to implement logic and make decisions in our code. The behavior of DateTime.Now or DateTime.UtcNow can differ due to the system, timezone and the time change (summer/winter). This means that we have to control this for our tests.</p>
<p>Take this method for instance:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">double</span> <span class="n">ReturnCurrentOffset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">TotalMinutes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As you see, this method calculates the current offset with <code>DateTime.Now</code> and <code>DateTime.UtcNow</code>. Now suppose you want to write unit test for it. We can not control the static properties. The result will be different over the year and the test will fail in the future.</p>]]></description>
</item>
<item>
    <title>Share context between tests with fixtures</title>
    <link>http://localhost:1313/posts/2021-05-02-test-fixture-pattern/</link>
    <pubDate>Sun, 02 May 2021 00:00:00 &#43;0200</pubDate>
    <author>Marcel</author>
    <guid>http://localhost:1313/posts/2021-05-02-test-fixture-pattern/</guid>
    <description><![CDATA[<h2 id="test-fixtures">Test Fixtures</h2>
<p>Imagine your about to sit down to eat your lunch. The dirty breakfast dish is still on the table. You got three options. You can get a new plate, you can clean the old plate, or you can just eat lunch off the dirty plate. Thats it. New plate, clean plate, dirty plate. The same rules apply to tests.</p>
<h3 id="transient-fresh-fixture">Transient Fresh Fixture</h3>
<p>Getting a new plate is what Meszaros calls in the book &ldquo;XUnit Test Patterns&rdquo; a Transient Fresh Fixture. The fixture is created from scratch at the beginning of each test.</p>]]></description>
</item>
<item>
    <title>Create Test Data cleanly with Fluent Builder Pattern</title>
    <link>http://localhost:1313/posts/2021-05-01-fluent-builder-pattern/</link>
    <pubDate>Sat, 01 May 2021 00:00:00 &#43;0200</pubDate>
    <author>Marcel</author>
    <guid>http://localhost:1313/posts/2021-05-01-fluent-builder-pattern/</guid>
    <description><![CDATA[<p>Helper methods make it easier to create test data. But they can become difficult to read over time as
you need more variations of the test data to satisfy constantly evolving requirements from new tests.</p>
<p>Let say, we have the following Customer class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="kd">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">DateOfBirth</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>In generally we create an instance of the Customer and set the respective properties as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">customer</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&#34;Jacob Knight&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">customer</span><span class="p">.</span><span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">1988</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">customer</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="s">&#34;nofec547@anim.com&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">customer</span><span class="p">.</span><span class="n">Address</span> <span class="p">=</span> <span class="s">&#34;4429 Kelley Road&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>The second step could be a helper method.
This helper method starts with just a single parameter:</p>]]></description>
</item>
</channel>
</rss>
